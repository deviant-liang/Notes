#include <iostream>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <cstring>
#include <unistd.h>
#include <netinet/ip.h>
#include <netinet/udp.h>

#define MULTICAST_GROUP "239.255.0.1"  // Example multicast address
#define PORT 12345                     // Example port
#define BUFFER_SIZE 1024               // Max packet size

// Function to calculate the checksum (for UDP)
unsigned short checksum(void* b, int len) {
    unsigned short* buf = (unsigned short*)b;
    unsigned int sum = 0;
    unsigned short result;

    for (sum = 0; len > 1; len -= 2)
        sum += *buf++;
    if (len == 1)
        sum += *(unsigned char*)buf;
    sum = (sum >> 16) + (sum & 0xFFFF);
    sum += (sum >> 16);
    result = ~sum;
    return result;
}

int main() {
    int sockfd;
    struct sockaddr_in dest_addr;
    char buffer[BUFFER_SIZE];
    const char *message = "Hello, Multicast!";
    int ttl = 1;  // Time to live for the multicast packet

    // Create a raw socket for sending (IPPROTO_RAW for sending raw IP packets)
    sockfd = socket(AF_INET, SOCK_RAW, IPPROTO_RAW);
    if (sockfd < 0) {
        perror("socket");
        return 1;
    }

    // Set the TTL for the packet
    if (setsockopt(sockfd, IPPROTO_IP, IP_MULTICAST_TTL, &ttl, sizeof(ttl)) < 0) {
        perror("setsockopt (IP_MULTICAST_TTL)");
        close(sockfd);
        return 1;
    }

    // Configure the destination address (multicast)
    memset(&dest_addr, 0, sizeof(dest_addr));
    dest_addr.sin_family = AF_INET;
    dest_addr.sin_port = htons(PORT);
    inet_pton(AF_INET, MULTICAST_GROUP, &dest_addr.sin_addr);

    // Build the IP header
    struct iphdr *ip_header = (struct iphdr *)buffer;
    struct udphdr *udp_header = (struct udphdr *)(buffer + sizeof(struct iphdr));

    // Fill in the IP header
    ip_header->ihl = 5;  // Header length
    ip_header->version = 4;  // IPv4
    ip_header->tos = 0;  // Type of service
    ip_header->tot_len = htons(sizeof(struct iphdr) + sizeof(struct udphdr) + strlen(message));  // Total packet length
    ip_header->id = htons(54321);  // Identification
    ip_header->frag_off = 0;  // No fragmentation
    ip_header->ttl = ttl;  // Time to live
    ip_header->protocol = IPPROTO_UDP;  // UDP
    ip_header->check = 0;  // Checksum (filled later)
    ip_header->saddr = inet_addr("0.0.0.0");  // Source IP (use any address)
    ip_header->daddr = dest_addr.sin_addr.s_addr;  // Destination IP (multicast group)

    // Build the UDP header
    udp_header->source = htons(12345);  // Source port
    udp_header->dest = htons(PORT);  // Destination port
    udp_header->len = htons(sizeof(struct udphdr) + strlen(message));  // UDP length
    udp_header->check = 0;  // Checksum (optional for IPv4, can be 0)

    // Copy the message after the UDP header
    memcpy(buffer + sizeof(struct iphdr) + sizeof(struct udphdr), message, strlen(message));

    // Calculate IP checksum
    ip_header->check = checksum((unsigned short *)buffer, sizeof(struct iphdr));

    // Send the packet
    if (sendto(sockfd, buffer, sizeof(struct iphdr) + sizeof(struct udphdr) + strlen(message), 0,
               (struct sockaddr*)&dest_addr, sizeof(dest_addr)) < 0) {
        perror("sendto");
        close(sockfd);
        return 1;
    }

    std::cout << "Sent multicast message: " << message << std::endl;

    close(sockfd);
    return 0;
}
