#include <iostream>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <cstring>
#include <unistd.h>

#define MULTICAST_GROUP "239.255.0.1"
#define PORT 12345
#define BUFFER_SIZE 65536  // Large enough to hold entire IP packet

// Helper function to extract UDP data from the raw packet
void parsePacket(char* buffer, ssize_t length) {
    // IP header is the first part of the packet
    struct iphdr* ip_header = (struct iphdr*) buffer;
    
    // Get the length of the IP header (ihl field, in 32-bit words, so we multiply by 4)
    int ip_header_length = ip_header->ihl * 4;

    // Pointer to the UDP header (immediately after the IP header)
    struct udphdr* udp_header = (struct udphdr*) (buffer + ip_header_length);

    // Calculate the length of the UDP data
    int udp_data_offset = ip_header_length + sizeof(struct udphdr);
    int udp_data_length = ntohs(udp_header->len) - sizeof(struct udphdr);

    // Check if there's UDP data
    if (udp_data_length > 0 && udp_data_offset < length) {
        char* udp_data = buffer + udp_data_offset;
        udp_data[udp_data_length] = '\0';  // Null-terminate for printing
        std::cout << "Received UDP data: " << udp_data << std::endl;
    }
}

int main() {
    int sockfd;
    struct sockaddr_in multicast_addr;
    struct ip_mreq mreq;
    char buffer[BUFFER_SIZE];

    // Create a raw socket for receiving IP packets (UDP packets)
    sockfd = socket(AF_INET, SOCK_RAW, IPPROTO_UDP);
    if (sockfd < 0) {
        perror("socket");
        return 1;
    }

    // Allow multiple sockets to use the same port (recommended for multicast)
    int reuse = 1;
    if (setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, &reuse, sizeof(reuse)) < 0) {
        perror("setsockopt (SO_REUSEADDR)");
        close(sockfd);
        return 1;
    }

    // Bind to the multicast address and port
    memset(&multicast_addr, 0, sizeof(multicast_addr));
    multicast_addr.sin_family = AF_INET;
    multicast_addr.sin_port = htons(PORT);
    multicast_addr.sin_addr.s_addr = htonl(INADDR_ANY);  // Bind to all local interfaces
    if (bind(sockfd, (struct sockaddr*)&multicast_addr, sizeof(multicast_addr)) < 0) {
        perror("bind");
        close(sockfd);
        return 1;
    }

    // Join the multicast group
    mreq.imr_multiaddr.s_addr = inet_addr(MULTICAST_GROUP);
    mreq.imr_interface.s_addr = htonl(INADDR_ANY);  // Use the default interface
    if (setsockopt(sockfd, IPPROTO_IP, IP_ADD_MEMBERSHIP, &mreq, sizeof(mreq)) < 0) {
        perror("setsockopt (IP_ADD_MEMBERSHIP)");
        close(sockfd);
        return 1;
    }

    std::cout << "Listening for multicast packets on group: " << MULTICAST_GROUP << " and port " << PORT << std::endl;

    // Receive packets in a loop
    while (true) {
        ssize_t packet_len = recvfrom(sockfd, buffer, BUFFER_SIZE, 0, nullptr, nullptr);
        if (packet_len < 0) {
            perror("recvfrom");
            break;
        }

        // Parse and print the UDP data from the raw packet
        parsePacket(buffer, packet_len);
    }

    // Leave the multicast group
    if (setsockopt(sockfd, IPPROTO_IP, IP_DROP_MEMBERSHIP, &mreq, sizeof(mreq)) < 0) {
        perror("setsockopt (IP_DROP_MEMBERSHIP)");
    }

    close(sockfd);
    return 0;
}
